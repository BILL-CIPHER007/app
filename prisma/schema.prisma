// Schema da Plataforma Educacional IFPI
generator client {
    provider = "prisma-client-js"
    
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserType {
  PROFESSOR
  ALUNO
}

enum Disciplina {
  LINGUA_PORTUGUESA
  MATEMATICA
  CIENCIAS
  HISTORIA
  GEOGRAFIA
  INGLES
}

enum Dificuldade {
  FACIL
  MEDIO
  DIFICIL
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  type      UserType
  points    Int      @default(0)
  level     Int      @default(1)
  medals    String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  createdQuestions Question[]
  createdQuizzes   Quiz[]
  quizAttempts     QuizAttempt[]

  @@map("users")
}

model Question {
  id               String     @id @default(cuid())
  disciplina       Disciplina
  assunto          String
  enunciado        String
  alternativas     String[]   // Array de alternativas
  respostaCorreta  Int        // Índice da resposta correta (0-4)
  dificuldade      Dificuldade
  professorId      String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relacionamentos
  professor        User       @relation(fields: [professorId], references: [id], onDelete: Cascade)
  quizzes          QuizQuestion[]

  @@map("questions")
}

model Quiz {
  id           String   @id @default(cuid())
  titulo       String
  descricao    String
  professorId  String
  tempoLimite  Int      // em minutos
  ativo        Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  professor    User           @relation(fields: [professorId], references: [id], onDelete: Cascade)
  questions    QuizQuestion[]
  attempts     QuizAttempt[]

  @@map("quizzes")
}

model QuizQuestion {
  id         String @id @default(cuid())
  quizId     String
  questionId String

  // Relacionamentos
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([quizId, questionId])
  @@map("quiz_questions")
}

model QuizAttempt {
  id             String   @id @default(cuid())
  alunoId        String
  quizId         String
  respostas      Json     // Array de respostas do aluno
  pontuacao      Int
  tempoGasto     Int      // em segundos
  dataConclusao  DateTime @default(now())

  // Relacionamentos
  aluno          User     @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  condition   String   // Condição para conquistar a medalha
  points      Int      @default(0)
  createdAt   DateTime @default(now())

  @@map("achievements")
}
